//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getItemDocument: ItemDocument;
  getItemList: ItemConnection;
  getPageDocument: PageDocument;
  getPageList: PageConnection;
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetItemDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetItemListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetPageDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetPageListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentNode = ItemDocument | PageDocument;

export type ItemFound = {
  __typename?: 'ItemFound';
  where?: Maybe<Scalars['String']>;
  when?: Maybe<Scalars['String']>;
};

export type ItemImages = {
  __typename?: 'ItemImages';
  myImage?: Maybe<Scalars['String']>;
};

export type Item = {
  __typename?: 'Item';
  name?: Maybe<Scalars['String']>;
  made?: Maybe<Scalars['String']>;
  found?: Maybe<ItemFound>;
  images?: Maybe<Array<Maybe<ItemImages>>>;
  description?: Maybe<Scalars['JSON']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ItemDocument = Node & Document & {
  __typename?: 'ItemDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Item;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type ItemConnectionEdges = {
  __typename?: 'ItemConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<ItemDocument>;
};

export type ItemConnection = Connection & {
  __typename?: 'ItemConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ItemConnectionEdges>>>;
};

export type Page = {
  __typename?: 'Page';
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
};

export type PageDocument = Node & Document & {
  __typename?: 'PageDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Page;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<PageDocument>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateItemDocument: ItemDocument;
  createItemDocument: ItemDocument;
  updatePageDocument: PageDocument;
  createPageDocument: PageDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateItemDocumentArgs = {
  relativePath: Scalars['String'];
  params: ItemMutation;
};


export type MutationCreateItemDocumentArgs = {
  relativePath: Scalars['String'];
  params: ItemMutation;
};


export type MutationUpdatePageDocumentArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageDocumentArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};

export type DocumentMutation = {
  item?: InputMaybe<ItemMutation>;
  page?: InputMaybe<PageMutation>;
};

export type ItemFoundMutation = {
  where?: InputMaybe<Scalars['String']>;
  when?: InputMaybe<Scalars['String']>;
};

export type ItemImagesMutation = {
  myImage?: InputMaybe<Scalars['String']>;
};

export type ItemMutation = {
  name?: InputMaybe<Scalars['String']>;
  made?: InputMaybe<Scalars['String']>;
  found?: InputMaybe<ItemFoundMutation>;
  images?: InputMaybe<Array<InputMaybe<ItemImagesMutation>>>;
  description?: InputMaybe<Scalars['JSON']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type ItemPartsFragment = { __typename?: 'Item', name?: string | null, made?: string | null, description?: any | null, tags?: Array<string | null> | null, found?: { __typename: 'ItemFound', where?: string | null, when?: string | null } | null, images?: Array<{ __typename: 'ItemImages', myImage?: string | null } | null> | null };

export type PagePartsFragment = { __typename?: 'Page', title?: string | null, body?: any | null };

export type GetItemDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetItemDocumentQuery = { __typename?: 'Query', getItemDocument: { __typename?: 'ItemDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Item', name?: string | null, made?: string | null, description?: any | null, tags?: Array<string | null> | null, found?: { __typename: 'ItemFound', where?: string | null, when?: string | null } | null, images?: Array<{ __typename: 'ItemImages', myImage?: string | null } | null> | null } } };

export type GetItemListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetItemListQuery = { __typename?: 'Query', getItemList: { __typename?: 'ItemConnection', totalCount: number, edges?: Array<{ __typename?: 'ItemConnectionEdges', node?: { __typename?: 'ItemDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Item', name?: string | null, made?: string | null, description?: any | null, tags?: Array<string | null> | null, found?: { __typename: 'ItemFound', where?: string | null, when?: string | null } | null, images?: Array<{ __typename: 'ItemImages', myImage?: string | null } | null> | null } } | null } | null> | null } };

export type GetPageDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetPageDocumentQuery = { __typename?: 'Query', getPageDocument: { __typename?: 'PageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Page', title?: string | null, body?: any | null } } };

export type GetPageListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPageListQuery = { __typename?: 'Query', getPageList: { __typename?: 'PageConnection', totalCount: number, edges?: Array<{ __typename?: 'PageConnectionEdges', node?: { __typename?: 'PageDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Page', title?: string | null, body?: any | null } } | null } | null> | null } };

export const ItemPartsFragmentDoc = gql`
    fragment ItemParts on Item {
  name
  made
  found {
    __typename
    where
    when
  }
  images {
    __typename
    myImage
  }
  description
  tags
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  title
  body
}
    `;
export const GetItemDocumentDocument = gql`
    query getItemDocument($relativePath: String!) {
  getItemDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...ItemParts
    }
  }
}
    ${ItemPartsFragmentDoc}`;
export const GetItemListDocument = gql`
    query getItemList {
  getItemList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...ItemParts
        }
      }
    }
  }
}
    ${ItemPartsFragmentDoc}`;
export const GetPageDocumentDocument = gql`
    query getPageDocument($relativePath: String!) {
  getPageDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...PageParts
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const GetPageListDocument = gql`
    query getPageList {
  getPageList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...PageParts
        }
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getItemDocument(variables: GetItemDocumentQueryVariables, options?: C): Promise<{data: GetItemDocumentQuery, variables: GetItemDocumentQueryVariables, query: string}> {
        return requester<{data: GetItemDocumentQuery, variables: GetItemDocumentQueryVariables, query: string}, GetItemDocumentQueryVariables>(GetItemDocumentDocument, variables, options);
      },
    getItemList(variables?: GetItemListQueryVariables, options?: C): Promise<{data: GetItemListQuery, variables: GetItemListQueryVariables, query: string}> {
        return requester<{data: GetItemListQuery, variables: GetItemListQueryVariables, query: string}, GetItemListQueryVariables>(GetItemListDocument, variables, options);
      },
    getPageDocument(variables: GetPageDocumentQueryVariables, options?: C): Promise<{data: GetPageDocumentQuery, variables: GetPageDocumentQueryVariables, query: string}> {
        return requester<{data: GetPageDocumentQuery, variables: GetPageDocumentQueryVariables, query: string}, GetPageDocumentQueryVariables>(GetPageDocumentDocument, variables, options);
      },
    getPageList(variables?: GetPageListQueryVariables, options?: C): Promise<{data: GetPageListQuery, variables: GetPageListQueryVariables, query: string}> {
        return requester<{data: GetPageListQuery, variables: GetPageListQueryVariables, query: string}, GetPageListQueryVariables>(GetPageListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

