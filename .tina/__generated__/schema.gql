# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getItemDocument(relativePath: String): ItemDocument!
  getItemList(before: String, after: String, first: Float, last: Float): ItemConnection!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Float, last: Float): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = ItemDocument | PageDocument

type ItemFound {
  where: String
  when: String
}

type ItemImages {
  myImage: String
}

type Item {
  name: String
  made: String
  found: ItemFound
  images: [ItemImages]
  description: JSON
  tags: [String]
}

type ItemDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Item!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ItemConnectionEdges {
  cursor: String
  node: ItemDocument
}

type ItemConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ItemConnectionEdges]
}

type Page {
  title: String
  body: JSON
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateItemDocument(relativePath: String!, params: ItemMutation!): ItemDocument!
  createItemDocument(relativePath: String!, params: ItemMutation!): ItemDocument!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  createPageDocument(relativePath: String!, params: PageMutation!): PageDocument!
}

input DocumentMutation {
  item: ItemMutation
  page: PageMutation
}

input ItemFoundMutation {
  where: String
  when: String
}

input ItemImagesMutation {
  myImage: String
}

input ItemMutation {
  name: String
  made: String
  found: ItemFoundMutation
  images: [ItemImagesMutation]
  description: JSON
  tags: [String]
}

input PageMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  